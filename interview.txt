 01 Matrix
 brute force :
 vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        if(rows == 0)
            return matrix;
        
        vector<vector<int>> dist(rows,vector<int>(cols,INT_MAX));
     
        for(int i = 0; i < rows; i++)
        {
            for(int j = 0; j < cols; j++)
            {
                if(matrix[i][j] == 0)
                {
                    dist[i][j]= 0;
                }
                else
                {
                    for(int k = 0; k <rows; k++)
                    {
                        for(int l = 0; l < cols;l++)
                        {
                            if(matrix[k][l] == 0)
                            {
                                int dist_1 = abs(k-i) +abs(l-j);
                                dist[i][j] = min (dist[i][j],dist_1);
                            }

                        }
                    }
                }
            }
        }
     return dist;
    }

BFS:
     vector<vector<int>> updateMatrix(vector<vector<int>>& matrix)
     {
         
         int rows = matrix.size();
         if(rows==0)
             return matrix;
         int cols = matrix[0].size();
         vector<vector<int>> dist (rows,vector<int>(cols,INT_MAX));
         //create a queue for bfs;
         queue<pair<int,int>> q;
         for(int i = 0 ; i < rows;i ++)
         {
            for(int j = 0 ; j <cols; j++)
            {
                if(matrix[i][j] == 0)
                {
                    dist[i][j] = 0;
                    q.push({i,j});
                }
            }
         }
         int dir[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
         while(!q.empty())
         {
             pair<int,int> curr = q.front();
             q.pop();
             for(int i = 0 ; i < 4; i ++)
             {
                int newr = curr.first+dir[i][0];
                int newc = curr.second+dir[i][1];
                 
                if(newr >= 0 && newr < rows&& newc >= 0 && newc < cols)
                {
                    if(dist[newr][newc] > dist[curr.first][curr.second]+1)
                    {
                        dist[newr][newc] = dist[curr.first][curr.second]+1;
                        q.push({newr,newc});
                    }
                    
                }
             }
         }
         
         
         return dist;
     }

DP:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix)
    {
        int rows = matrix.size();
        if(rows==0)
        {
            return matrix;
        }
        int cols = matrix[0].size();
        vector<vector<int>> dist(rows,vector<int>(cols,INT_MAX-1));
        for(int i= 0 ; i < rows; i++)
        {
            for(int j = 0 ; j < cols; j++)
            {
                if(matrix[i][j] == 0)
                    dist[i][j] = 0;
                else{
                    if(i >0)
                        dist[i][j] = min(dist[i][j],dist[i-1][j]+1);
                    if(j >0)
                        dist[i][j] = min(dist[i][j],dist[i][j-1]+1);
                }
            }
        }
        
        
        for(int i= rows-1 ; i >=0 ; i--)
        {
            for(int j = cols-1 ; j >=0; j--)
            {
                if(matrix[i][j] == 0)
                    dist[i][j] = 0;
                else{
                    if(i < rows-1)
                        dist[i][j] = min(dist[i][j],dist[i+1][j]+1);
                    if(j < cols-1)
                        dist[i][j] = min(dist[i][j],dist[i][j+1]+1);
                }
            }
        }
        return dist;
    }


239. Sliding Window Maximum
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int> dq;
        vector<int> ans;
        for (int i = 0 ; i <nums.size();i++ )
        {
            if(!dq.empty() && dq.front() == i-k)
                dq.pop_front();
            while(!dq.empty() && nums[dq.back()]<nums[i])
            {
                dq.pop_back();
            }
            dq.push_back(i);
            
            if(i>=k-1)
                ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};

scheduleCourse:
class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        // sort(courses.begin(), courses.end(),[](auto &a, auto &b){return a[1]>b[1];} );
        sort(courses.begin(), courses.end(), [](auto &a, auto &b) {return a[1] < b[1];});
        priority_queue<int> pq;
        int total =0;
        
        for(auto & c: courses)
        {
            int dur = c[0];
            int end = c[1];
            
            if(total+ dur <= end)
            {
                total+= dur;
                pq.push(dur);
                
            }
            else if(pq.size() && pq.top() > dur)
            {
                total = total + (dur - pq.top());
                pq.pop();
                pq.push(dur);
            }
            
        }
        return pq.size();
        
        
    }
};

minTaps:
class Solution {
public:
    int minTaps(int n, vector<int>& ranges) {
        //i - ranges[i], i+ ranges[i];
        
//         sort(ranges.begin(), ranges.end(),[](auto &a, auto &b){return a<b;});
        
//         priority_queue<int> pq;
        
//         int total = 0;
//         for(int i = 0 ; i < ranges.size(); i ++)
//         {
//             int r = (i+ranges[i]) - (i - ranges[i]);
            
//             if((total + (total - r))<= n)
//             {
//                 total += (total-r);
//                 pq.push(r);
//             }
//             else if(pq.empty() && pq.top() > r)
//             {
//                 total = total + (total-r) - pq.top();
//                 pq.pop();
//                 pq.push(r);
//             }
//         }
//         return pq.size();
        
        
        
        vector<int> dp(n+1,n+2);
        dp[0] = 0 ;
        
        
        
        for(int i = 0 ; i <= n; ++i)
        {
            for(int j = max(i-ranges[i]+1, 0); j < min=(i+ranges[i],n);++j)
            {
                dp[j] = min(dp[j],dp[max(0,i-A[i])]+1);
            }
        }
        return dp[n] <+2? dp[n] :-1;
    }
};


jobScheduling:
class Solution {
public:
    struct x{
      int start;
        int end;
        int profit;
    };
    static int sfn(x m , x n )
    {
        return m.end < n.end;
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        //dp
        // result = max (i-1, i ) 
        // [1,2,3,3,] [3,4,5,6] 
        // 1-3,2-4, 3-5,3-6
        int sz = startTime.size();
        int dp[sz];
        vector<x> y(sz);
        
        for(int i = 0 ; i < sz; i++)
        {
            y[i].start=startTime[i];
            y[i].end = endTime[i];
            y[i].profit = profit[i];
        }
        sort(y.begin(),y.end(),sfn);
        for(int i = 0 ; i < sz; i++)
        {
            if(!i)
            {
                dp[i] = y[i].profit;
                continue;
            }
            
            int f = 0 ;
            for(int j = i - 1; j >= 0; j--)
            {
                if(y[j].end <= y[i].start)
                {
                    f = dp[j];
                    break;
                }
            }
            
            dp[i] = max(dp[i-1],f+y[i].profit);
        }
        return dp[sz-1];
    }
};



https://leetcode.com/discuss/interview-question/1028649/Snowflake-or-OA-or-Maximum-order-volume


maximum order volume
input: startime, duration, ordervolume

== starttime, endtime, orderovlume;



store into struct, start,end, profit
comparetor , max heap : <

initialize;
        int sz = startTime.size();
        int dp[sz];
        vector<x> y(sz);
        
        for(int i = 0 ; i < sz; i++)
        {
            y[i].start=startTime[i];
            y[i].end = endTime[i];
            y[i].profit = profit[i];
        }

sort
 sort(y.begin(),y.end(),sfn);

loop the arry y meap heap for endtime
if(from 0 to current find max end that less than current start)
{
    set it as f = dp[j]; == f == profit;
}
***dp[i] = max(dp[i-1],f+y[i].profit);

return dp[sz-1];






//GRID:::::::::::::::: 
// CPP Program to find Lexicographically Kth
// smallest way to reach given coordinate from origin

// Return the Kth smallest way to reach given coordinate from origin
long factorial(int a ,int b)
{
    long res = 1;
    for(int i = 1; i <= (a+b);i++)
        res = res*i;
        
    for(int i = 1; i <=a; i++)
        res = res/i;
    for(int i = 1 ; i <= b ; i++)
        res = res/i;
    
    return res;
    
}
// Complete the solve function below.


vector<string> split_string(string);
long factorial(int a ,int b)
{
    long res = 1;
    for(int i = 1; i <= (a+b);i++)
        res = res*i;
        
    for(int i = 1; i <=a; i++)
        res = res/i;
    for(int i = 1 ; i <= b ; i++)
        res = res/i;
    
    return res;
    
}



string solve(int x, int y, int k, string & result) {
// cout<<x <<"  "<<y<<" "<<k <<" " <<result<<endl;
    if(x<=0 && y <= 0 ){
        // result = "";
        return "";
    }
        
    else if(x == 0)
    {
        y -- ; 
        result+='V';
        return "V"+ solve(x,y,k,result);
    }
    else if(y == 0)
    {
        x--;
        result+='H';
        return "H"+solve(x,y,k,result);
    }
    else{
    
        if(factorial(x - 1, y) > k)
        {
            result+= 'H';
            return "H"+solve(x - 1, y, k,result);
        }
        else
        {
            result+='V';
            return "V"+solve(x, y - 1, k - factorial(x - 1, y),result);
        }
        
    }

}